** week 7: Italy poll of polls
   :LOGBOOK:
   CLOCK: [2018-12-14 Fri 12:22]--[2018-12-14 Fri 13:09] =>  0:47
   CLOCK: [2018-12-14 Fri 11:07]--[2018-12-14 Fri 11:11] =>  0:04
   CLOCK: [2018-12-14 Fri 10:54]--[2018-12-14 Fri 11:06] =>  0:12
   CLOCK: [2018-12-14 Fri 10:15]--[2018-12-14 Fri 10:54] =>  0:39
   :END:
*** install and load some packages
#+BEGIN_SRC R
# install a package
install.packages('name of the package')

# load a package
library('name of the package')
#+END_SRC

#+BEGIN_SRC R
# install.packages('rvest')
# install.packages('tidyverse')
# install.packages('tidyquant')
# install.packages('ggthemes')
library('rvest')
library('dplyr')
library('ggplot2')
library('reshape2')
library('tidyquant')
library('ggthemes')
#+END_SRC

*** scrape data from wikipedia table
#+BEGIN_SRC R
# we store our URL in a variable
url <- 'https://en.wikipedia.org/wiki/Opinion_polling_for_the_Italian_general_election,_2018'

# column names
column_names <- c('date', 'firm', 'sample', 'pd', 'e', 'i', 'cp', 'fi', 'ln', 'fdl', 'ncl', 'm5s', 
                  'leu', 'pap', 'cpi', 'others', 'lead')

# decompose line by line:
# request to the server, parsing, finding the right element,
# filling blank cells, adding column titles, removing extra bits
table_2018 <- url %>%
  read_html() %>%
  html_node(xpath='/html/body/div[3]/div[3]/div[4]/div/table[3]') %>%
  html_table(fill = TRUE) %>%
  setNames(column_names) %>%
  tail(-2)
#+END_SRC

*** just a quick thing...
#+BEGIN_SRC R
# I said no for loops - sorry.
# we just need to convert all of these columns into numbers!
for(i in c(4:ncol(table_2018))) {
  table_2018[,i] <- as.numeric(as.character(table_2018[,i]))
}
#+END_SRC

*** string operations to clean our dates
Our dates currently look like this:

#+BEGIN_SRC R
table_2018$date %>% head()
[1] "4 March 2018" "12–16 Feb"    "14–15 Feb"    "14 Feb"       "13–14 Feb"    "12–14 Feb"
#+END_SRC

This isn't quite ready to be read as dates by the code...

**** Basics of date operations

#+BEGIN_SRC R
# string operations
str <- "30 Jan - 2 Feb"
strsplit(str, "-")[[1]]
tail(strsplit(str, "-")[[1]], n="1")
paste(str, " 2018")
#+END_SRC

*** Let's make a function!
A function has this syntax:

#+BEGIN_SRC R
myFunction <- function(parameter1, parameter2) {
  # do things with parameters
  # return a result
}
#+END_SRC

The returned result can be accessed like this:

#+BEGIN_SRC R
myResult <- myFunction(parameter)
#+END_SRC

**** Our date-cleaning function
#+BEGIN_SRC R
clean_date_function <- function(date, year) {
  date_split <- paste(
    tail(
      strsplit(date, "–")[[1]], 
      n=1), 
    year)
  clean_date <- as.Date(date_split, format = "%d %b %Y")
  return(clean_date)
}
#+END_SRC

*** Let's apply our function
#+BEGIN_SRC R
# line by line...
data_2018 <- table_2018 %>%
  group_by(date) %>%
  mutate(clean_date = clean_date_function(date, " 2018")) %>%
  ungroup() %>%
  select(-date, -firm, -sample, -lead) %>%
  melt(id="clean_date")
#+END_SRC

#+BEGIN_SRC R
> data_2018 %>% head()
  clean_date variable value
1 2018-03-04       pd  18.8
2 2018-02-16       pd  21.3
3 2018-02-15       pd  22.5
4 2018-02-14       pd  22.1
5 2018-02-14       pd  24.5
6 2018-02-14       pd  21.9
#+END_SRC

One line for each observation!

*** Result on a chart
#+BEGIN_SRC R
ggplot(data = data_2018, aes(clean_date, value, color=variable)) + 
  geom_point() + 
  geom_ma(ma_fun = SMA, n = 10)
#+END_SRC

[[fig/Rplot.png]]

*** We do the same for 2017
Check column names, get table, clean numbers...
#+BEGIN_SRC R
## same for 2017 data
column_names2017 <- c('date', 'firm', 'pd', 'e', 'i', 'cp', 'fi', 'ln', 'fdl', 'ncl', 'm5s', 
                  'leu', 'pap', 'cpi', 'others', 'lead')
one_year <- url %>%
  read_html() %>%
  html_node(xpath='/html/body/div[3]/div[3]/div[4]/div/table[4]') %>%
  html_table(fill = TRUE) %>%
  setNames(column_names2017) %>%
  tail(-2)

for(i in c(3:ncol(one_year))) {
  one_year[,i] <- as.numeric(as.character(one_year[,i]))
}
#+END_SRC

**** Tidy representation
#+BEGIN_SRC R
data_2017 <- one_year %>% group_by(date) %>%
  mutate(clean_date = clean_date_function(date, " 2017")) %>%
  ungroup() %>%
  select(-date, -firm, -lead) %>%
  melt(id="clean_date")
#+END_SRC

[[fig/Rplot01.png]]

*** Results from 2017
#+BEGIN_SRC R
ggplot(data = data_2017, aes(clean_date, value, color=variable)) + 
  geom_point(aes(shape="21",alpha=1/100)) + 
  geom_ma(ma_fun = SMA, n = 10)
#+END_SRC

[[fig/Rplot01.png]]

*** Merging 2017 and 2018

Here we don't need ~left_join~ things, because our data is tidy: only three identical columns in both datasets

#+BEGIN_SRC R
data <- merge(data_2018, data_2017, all=TRUE)
#+END_SRC

**** Let's quickly check what we've done

#+BEGIN_SRC R
> data_2017 %>% summary()
   clean_date          
 Min.   :2017-01-09    
 1st Qu.:2017-03-24    
 Median :2017-06-08    
 Mean   :2017-06-26    
 3rd Qu.:2017-10-08    
 Max.   :2017-12-28    

data_2018 %>% summary()
   clean_date       
 Min.   :2018-01-07 
 1st Qu.:2018-01-19 
 Median :2018-02-01 
 Mean   :2018-01-29 
 3rd Qu.:2018-02-11 
 Max.   :2018-03-04 
                    
> data %>% summary()
      date           
 Min.   :2017-01-09  
 1st Qu.:2017-04-07  
 Median :2017-07-19  
 Mean   :2017-08-03  
 3rd Qu.:2017-11-29  
 Max.   :2018-03-04  
#+END_SRC

*** Calculate moving average

What we've got so far is a bunch of polls. A poll of polls is some kind of aggregate calculation.

In this instance we will calculate a rolling average over 20 observations:

#+BEGIN_SRC R
data <- data %>%
  rename(date = clean_date, party = variable) %>%
  group_by(party) %>%
  mutate(mean20_missing = rollapply(value, width = 20,
                                    fill = NA, partial = TRUE, 
                                    FUN=function(x) mean(x, na.rm=TRUE),
                                    align = "right"))
				    
> data %>% tail()
# A tibble: 6 x 4
# Groups:   party [6]
  date       party  value mean20_missing
  <date>     <fct>  <dbl>          <dbl>
1 2018-03-04 ncl      1.3          2.23 
2 2018-03-04 m5s     32.7         27.9  
3 2018-03-04 leu      3.4          5.54 
4 2018-03-04 pap      1.1          1.41 
5 2018-03-04 cpi      0.9          0.855
6 2018-03-04 others   2.4          2.21
#+END_SRC

*** Final plot
#+BEGIN_SRC R
ggplot(data, 
       aes(date, color=party)) + 
  geom_point(aes(y=value, shape="21", alpha=1/100)) + 
  geom_line(aes(y=mean20_missing, color=party)) +
  theme_minimal()
#+END_SRC

[[fig/Rplot02.png]]

*** More things
**** Colours for parties
#+BEGIN_SRC R
# visualise
unique(data$party)
colors <- c('firebrick', 'grey', 'steelblue', 'cadetblue1', 'dodgerblue4',
            'brown4', 'gold', 'grey', 'grey', 'grey', 'grey', 'grey', 
            'grey', 'grey', 'grey', 'grey', 'grey', 'grey', 'grey')
names(colors) <- unique(data$party)

> colors %>% head()
   pd          i        cp           fi           ln             fdl 
  "firebrick"  "grey"   "steelblue"  "cadetblue1" "dodgerblue4"  "brown4" 

ggplot(data, 
       aes(date, color=party)) + 
  geom_point(aes(y=value, shape="21", alpha=1/100)) + 
  geom_line(aes(y=mean20_missing, color=party)) +
  scale_color_manual(values = colors) +
  theme_minimal()
#+END_SRC

[[fig/Rplot03.png]]

**** Filtering parties

#+BEGIN_SRC R
data %>% filter(party %in% c('pd', 'fi', 'ln', 'fdl', 'm5s', 'leu')) %>%
ggplot(aes(date, color=party)) + 
  geom_point(aes(y=value, shape="21", alpha=1/100)) + 
  geom_line(aes(y=mean20_missing, color=party)) +
  scale_color_manual(values = colors)
  theme_minimal()
#+END_SRC

[[fig/Rplot04.png]]

**** Annotations

#+BEGIN_SRC R
annot <- read.table(text=
                    "year|wait|just|text|pcolor
                    2018-01-01|0.22|0|Democratic party|firebrick
                    2018-01-01|0.3|0|Five Star|gold
                    2018-01-01|0.17|0|Forza|steelblue
                    2018-01-01|0.12|0|League|cadetblue1
                    2018-01-01|0.08|0|Free and Equal|brown4
                    2018-01-01|0.03|0|Brothers of Italy|dodgerblue4",
                    sep="|", header=TRUE, stringsAsFactors=FALSE)
#annot$text <- gsub("", "\n", annot$text)
annot$year <- as.Date(annot$year)

data %>% filter(party %in% c('pd', 'fi', 'ln', 'fdl', 'm5s', 'leu')) %>%
ggplot(aes(date, color=party)) + 
  geom_point(aes(y=value/100, shape="21", alpha=0.001)) +
  geom_line(aes(y=mean20_missing/100)) +
  theme_minimal() + scale_color_manual(values = colors) +
  scale_y_continuous(labels = scales::percent) +
  ggtitle("Italian party polling") +
  xlab("Date") + ylab("Poll") + geom_label(data=annot, aes(x=year, y=wait, label=text),
                                           lineheight=0.95,
                                           size=4, label.size=0, color=annot$pcolor)+ 
  theme(legend.position = "none")

#+END_SRC

[[fig/Rplot05.png]]
