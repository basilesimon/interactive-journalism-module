** scraping police data
   :LOGBOOK:
   CLOCK: [2019-01-11 Fri 13:23]--[2019-01-11 Fri 14:35] =>  1:12
   CLOCK: [2019-01-11 Fri 10:00]--[2019-01-11 Fri 12:52] =>  2:52
   :END:
*** Where do we find our data

In the UK, [[https://data.police.uk/][Police.uk]] distributes crime and outcome data as Open Government Licence.

The website provides both:
- A bulk download (download big data files containing all the data)
- An open API to create more precise queries ahead of download

**** What is an API

#+BEGIN_QUOTE
An API is a way to serve your customers
#+END_QUOTE
[[https://medium.freecodecamp.org/what-is-an-api-in-english-please-b880a3214a82][Source]]

Example:

You search a map area for AirBnB available at a particular date. AirBnB servers return to your web browser some relevant data after receiving your question and computing the answer;

Insofar as programming and data journalism are concerned, we're interested in APIs as they represent documented and open way to query a dataset.

**** The Police.UK API
[[https://data.police.uk/docs/method/crime-street/][The API documentation]]

Reading and understanding an API's documentation is paramount: this is the language we'll need to speak if we want the correct data sent back to us.

*** Getting data from an API
    
Quite often for us, we will need to perform a ~GET~ request to a server:

[[https://book.varnish-software.com/3.0/_images/httprequestflow.png]]

Our work with an API is to construct a URL that makes sense.
URLs are structured this way:

#+BEGIN_SRC html
https://this-is-a-url.com/
#+END_SRC

APIs usually live at an ~endpoint~:

#+BEGIN_SRC html
https://this-is-a-url.com/endpoint
#+END_SRC

And they require parameters:

#+BEGIN_SRC html
https://this-is-a-url.com/endpoint?parameter=1337
#+END_SRC

**** Test request in R
We will perform a GET request of all crime around Northampton Square in November 2018.

[[https://data.police.uk/docs/method/crime-street/][From the API documentation...]]

#+BEGIN_SRC html
This is the URL
https://data.police.uk/api/crimes-street

This is the endpoint
/all-crime?

These are the parameters
lat=
lon=
date=
#+END_SRC

#+BEGIN_SRC R
url <- "https://data.police.uk/api/crimes-street/all-crime?lat=51.527317&lng=-0.102433&date=2018-11"
#+END_SRC

**** Test request in R

This API returns data in another format: JSON – this is very common on the web. JSON looks like this:

#+BEGIN_SRC js
{"category":"anti-social-behaviour",
 "location_type":"Force",
 "location":{
     "latitude":"51.529697",
     "street":{
         "id":960985,
          "name":"On or near Conference\/exhibition Centre"
     },
     "longitude":"-0.118592"
 },
 "context":"",
 "outcome_status":null,
 "persistent_id":"",
 "id":69909158,
 "location_subtype":"",
 "month":"2018-11"}
#+END_SRC

We will need to convert this format into something R prefers:

#+BEGIN_SRC R
library(httr)
library(jsonlite)

url <- "https://data.police.uk/api/crimes-street/all-crime?lat=51.527317&lng=-0.102433&date=2018-11"
request <- GET(url)
jsonRespText <- content(request, as="text") 
df <- fromJSON(jsonRespText, flatten = TRUE)
#+END_SRC

**** Quick analysis
How many crime of each type, sorted descending

#+BEGIN_SRC R
df %>% group_by(category) %>%
  summarise(count = n()) %>% 
  arrange(desc(count))

# A tibble: 14 x 2
   category              count
   <chr>                 <int>
 1 other-theft             554
 2 anti-social-behaviour   394
 3 violent-crime           347
 4 theft-from-the-person   257
 5 vehicle-crime           158
 6 public-order            135
 7 shoplifting             112
 8 burglary                107
#+END_SRC

#+BEGIN_SRC R
df %>% group_by(category) %>%
  summarise(count = n()) %>% 
  arrange(desc(count)) %>%
  ggplot() +
  geom_bar(aes(x = reorder(category, -count),
               y = count), stat = "identity") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
#+END_SRC

[[fig2/Rplot.png]]

#+BEGIN_SRC R
df %>% group_by(location.street.name) %>%
  summarise(count = n()) %>% 
  arrange(desc(count)) %>% head(10) %>%
  ggplot() +
  geom_bar(aes(x = reorder(location.street.name, -count),
               y = count), stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#+END_SRC

[[fig2/Rplot01.png]]

*** Querying several months of data

So this was one month of data (November 2018) – what if we want more?

A programming pattern you will see regularly is the following:

- We create an empty thing/variable: our final dataset, empty for now
- We have a list of things we need to do some work on
- We iterate over each item in this list, build a temporary store
- Then for each iteration we append the temporary store to our main dataset

When we're finished running over each element in our main list, we end up with a complete main dataset!

**** For loop

The tool for the job is the for loop:

#+BEGIN_SRC R
vector <- c('one', 'two', 'basile')
for (variable in vector) {
  print(variable)
}

[1] "one"
[1] "two"
[1] "basile"
#+END_SRC

**** Appending to an empty list

Conceptually, we'll do this:

#+BEGIN_SRC 
# our main dataset
records <- data.frame()
list_of_months <- c("2018-10", "2018-11")

for (month in list_of_months) {
  # do get request
  
  # our temporary date store with all the right columns
  df <- get_request
  
  # send our temporary data store back up
  # to populate our main dataset
  records <- bind_rows(records, df)
}
#+END_SRC

**** Putting it together

#+BEGIN_SRC R
library(stringr)
library(httr)
library(jsonlite)
library(dplyr)

records <- data.frame()

list_of_months <- c("2018-09", "2018-10", "2018-11")

for (month in list_of_months) {

  # url without the month
  url <- "https://data.police.uk/api/crimes-street/all-crime?lat=51.527317&lng=-0.102433&date="
  
  # we paste the month at the end of the URL
  resp <- GET(str_c(url, month))
  
  # then as normal
  jsonRespText<-content(resp,as="text") 
  jsonRespParsed<-content(resp,as="parsed") 
  j <- fromJSON(jsonRespText, flatten = TRUE)
  records <- bind_rows(records, j)
}
#+END_SRC
 
*** Crime type analysis by month around university
**** Simple tally
#+BEGIN_SRC R
records %>% group_by(category) %>%
  summarise(count = n()) %>% 
  arrange(desc(count)) %>% head(10) %>%
  ggplot() +
  geom_bar(aes(x = reorder(category, -count),
               y = count), stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#+END_SRC

[[fig2/Rplot02.png]]

**** Simple locations
#+BEGIN_SRC R
records %>% group_by(location.street.name) %>%
  summarise(count = n()) %>% 
  arrange(desc(count)) %>% head(10) %>%
  ggplot() +
  geom_bar(aes(x = reorder(location.street.name, -count),
               y = count), stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#+END_SRC

[[fig2/Rplot03.png]]

**** Crime type by month
#+BEGIN_SRC R
records %>% group_by(category, month) %>%
  mutate(count = n()) %>% 
  select(month, count, category) %>%
  ggplot() +
  geom_bar(aes(x = reorder(category, -count),
               y = count), stat = "identity") + 
  facet_wrap(month~.) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#+END_SRC

[[fig2/Rplot04.png]]

**** Crime type by month, cont
#+BEGIN_SRC R
records %>% group_by(category, month) %>%
  mutate(count = n()) %>%  distinct(month, count, category) %>%
  select(month, count, category) %>% 
  ggplot(aes(x = month,
             y = count, group = 1)) +
  geom_path(, colour="black") + 
  facet_wrap(category~.) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
#+END_SRC

[[fig2/Rplot05.png]]

**** Crime type change by month
#+BEGIN_SRC R
records %>% group_by(category, month) %>%
  summarise(count = n()) %>%
  mutate(change = (count - lag(count))/lag(count) * 100) %>%
  distinct(month, category, change) %>%
  ggplot(aes(x = month, y = category, fill = change)) +
  geom_tile(colour="white",size=0.25) +
  scale_fill_viridis_c(option = "B", name = "Number of crimes") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

#+END_SRC

[[fig2/Rplot10.png]]


*** Part two: Making some maps
*** Bulk download of data
   
Aside from the API, we can [[https://data.police.uk/data/][download bulk data]]

#+BEGIN_SRC R
library(readr)
df <- read_csv("data/2018-11-metropolitan-street.csv")
#+END_SRC

*** Simple map
   
#+BEGIN_SRC R
library(ggplot2)
df %>% 
  ggplot() +
  geom_point(aes(x = Longitude, y = Latitude, alpha = 1/100),
             size = 1/100, color = I("tomato")) +
  coord_map(xlim = c(-0.6,0.4), ylim = c(51.25, 51.75))
#+END_SRC

[[fig2/Rplot06.png]]

**** Adding London boroughs
     
#+BEGIN_SRC R
library("londonShapefiles")

thames <- load_thames()
thames.proj <- spTransform(thames, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
thames.df <- fortify(thames.proj)

boroughs <- load_la()
boroughs.proj <- spTransform(boroughs, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
boroughs.df <- fortify(boroughs.proj)

ggplot() +
  geom_polygon(boroughs.df, mapping=aes(long, lat, group = group,
                                        color = I("gray90"))) +
  geom_polygon(thames.df, mapping=aes(long, lat, group = group,
                                      fill = I("skyblue"),
                                      color = I("skyblue2"))) +
  coord_map(xlim = c(-0.6,0.4), ylim = c(51.25, 51.75))
#+END_SRC

[[fig2/Rplot07.png]]

**** Both together
     
#+BEGIN_SRC R
idf %>% 
  ggplot() +
  geom_polygon(boroughs.df, mapping=aes(long, lat, group = group,
                                        color = I("gray99"),
                                        fill = I("gray90"))) +
  geom_polygon(thames.df, mapping=aes(long, lat, group = group,
                                      fill = I("skyblue"),
                                      color = I("skyblue2"))) +
  geom_point(aes(x = Longitude, y = Latitude),
             size = 1/100, color = I("tomato"), alpha = 1/100) +
  coord_map(xlim = c(-0.6,0.4), ylim = c(51.25, 51.75)) +
  theme_minimal() +
  theme(legend.position = "none")
#+END_SRC

[[fig2/Rplot08.png]]

*** Obscure spatial analysis
    
As we've got many, may points (91,833 crimes), we can use ~geom_bin2d~ to provide an alternative to overplotting

#+BEGIN_QUOTE
Divides the plane into rectangles, counts the number of cases in each rectangle, and then (by default) maps the number of cases to the rectangle's fill. This is a useful alternative to geom_point() in the presence of overplotting.
#+END_QUOTE

#+BEGIN_SRC R
df %>%
  ggplot(mapping=aes(x = as.numeric(Longitude),
                     y = as.numeric(Latitude))) +
  geom_polygon(boroughs.df, mapping=aes(long, lat, group = group,
                                        color = I("gray60"), alpha = 0.1)) +
  geom_bin2d(bins = 1000, aes(alpha=..ncount..)) +
  scale_alpha(range = c(0.3, 1)) +
  coord_map(xlim = c(-0.6,0.4), ylim = c(51.25, 51.75)) +
  theme_minimal()
#+END_SRC

[[fig2/Rplot09.png]]

*** TODO Part three: Advanced scraping of Tube stations
[[https://r-tastic.co.uk/post/exploring-london-crime-with-r-heat-maps/][Original tutorial]]
*** TODO Scraping Tube stations
*** TODO Scraping Crime by location
**** TODO Merging everything
**** TODO Quick map to check
*** TODO Analysis heatmap
